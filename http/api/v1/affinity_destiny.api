syntax = "v1"

info (
	title:   "AffinityDestiny(HTTP)"
	desc:    "AffinityDestiny http api definitions"
	author:  "Mackay Zhou"
	date:    "2024.08.16"
	version: "v1"
)

import "base.api"

// ==========1.User==========
type (
	CodeSendReq {
		Mobile string `json:"mobile"`
	}
	CodeValidateReq {
		Mobile string `json:"mobile"`
		Code   string `json:"code"`
	}
	UserLoginReq {
		Mobile   string `json:"mobile"`
		Password string `json:"password"`
	}
	UserPasswordReq {
		PathIdReq
		OldPassword string `json:"oldPassword"`
		NewPassword string `json:"newPassword"`
	}
	UserUpdateReq {
		PathIdReq
		CustomId string `json:"customId"`
		Nickname string `json:"nickname"`
		Avatar   string `json:"avatar"`
		Sex      int64  `json:"sex"`
		Memo     string `json:"memo"`
	}
	UserResp {
		Id          int64  `json:"id"`
		CustomId    string `json:"customId"`
		Mobile      string `json:"mobile"`
		Nickname    string `json:"nickname"`
		Avatar      string `json:"avatar"`
		Sex         int64  `json:"sex"`
		Memo        string `json:"memo"`
		CreatedAt   string `json:"createdAt"`
		UpdatedAt   string `json:"updatedAt"`
		LastLoginAt string `json:"lastLoginAt"`
	}
	PasswordResp {
		IsSetPassword bool `json:"isSetPassword"`
	}
)

@server (
	prefix:  /v1/users
	group:   user
	timeout: 10s
)
service user-api {
	@handler CodeSend
	post /send-code (CodeSendReq)

	@handler CodeValidate
	post /validate-code (CodeValidateReq) returns (UserResp)

	@handler UserLogin
	post /login (UserLoginReq) returns (UserResp)

	@handler UserFind
	// id: customId/mobile
	get /:id (PathIdStrReq) returns (UserResp)

	@handler UserUpdate
	put /:id (UserUpdateReq)

	@handler PasswordIsSet
	get /:id/password (PathIdReq) returns (PasswordResp)

	// set password & reset password
	@handler PasswordSet
	post /:id/password (UserPasswordReq)
}

// ==========2.Category==========
type (
	CategoryCreateReq {
		NameZh string `json:"nameZh"`
		NameEn string `json:"nameEn"`
		Star   int64  `json:"star"`
	}
	CategoryUpdateReq {
		PathIdReq
		CategoryCreateReq
	}
	CategoryResp {
		Id        int64  `json:"id"`
		OwnerId   int64  `json:"ownerId"`
		NameZh    string `json:"nameZh"`
		NameEn    string `json:"nameEn"`
		Star      int64  `json:"star"`
		CreatedAt string `json:"createdAt"`
		UpdatedAt string `json:"updatedAt"`
	}
	CategoryPagedResp {
		PagedResp
		Data []CategoryResp `json:"data"`
	}
)

@server (
	prefix:  /v1/categories
	group:   category
	timeout: 10s
)
service user-api {
	@handler CategoryList
	get / (QueryListReq) returns (CategoryPagedResp)

	@handler CategoryCreate
	post / (CategoryCreateReq)

	@handler CategoryUpdate
	put /:id (CategoryUpdateReq)

	@handler CategoryDelete
	delete /:id (PathIdReq)
}

// ==========3.User Contact==========
type (
	UserContactCategorySetReq {
		PathIdReq
		CategoryId int64 `json:"categoryId"`
	}
	UserContactBackgroundSetReq {
		PathIdReq
		Background string `json:"background"`
	}
	UserContactIsSet {
		PathIdReq
		Value bool `json:"value"`
	}
	UserContactResp {
		Id         int64        `json:"id"`
		OwnerId    int64        `json:"ownerId"`
		DstId      int64        `json:"dstId"`
		CategoryId int64        `json:"categoryId"`
		Background string       `json:"background"`
		IsDisturb  bool         `json:"isDisturb"`
		IsTop      bool         `json:"isTop"`
		IsRemind   bool         `json:"isRemind"`
		CreatedAt  string       `json:"createdAt"`
		UpdatedAt  string       `json:"updatedAt"`
		Category   CategoryResp `json:"category"`
		User       UserResp     `json:"user"`
	}
	UserContactPagedResp {
		PagedResp
		Data []UserContactResp `json:"data"`
	}
)

@server (
	prefix:  /v1/user-contacts
	group:   user_contact
	timeout: 10s
)
service user-api {
	@handler UserContactList
	get / (QueryListReq) returns (UserContactPagedResp)

	@handler UserContactAdd
	// id: dstId
	post /:id (PathIdReq)

	@handler UserContactDelete
	delete /:id (PathIdReq)

	@handler UserContactCategorySet
	post /:id/category (UserContactCategorySetReq)

	@handler UserContactBackgroundSet
	post /:id/background (UserContactBackgroundSetReq)

	@handler UserContactIsDisturbSet
	post /:id/is-disturb (UserContactIsSet)

	@handler UserContactIsTopSet
	post /:id/is-top (UserContactIsSet)

	@handler UserContactIsRemindSet
	post /:id/is-remind (UserContactIsSet)
}

// ==========4.Group==========
type (
	GroupCreateReq {
		Name   string `json:"name"`
		Avatar string `json:"avatar"`
		Memo   string `json:"memo"`
	}
	GroupUpdateReq {
		PathIdReq
		GroupCreateReq
	}
	GroupTransferReq {
		PathIdReq
		OwnerId int64 `json:"ownerId"`
	}
	GroupResp {
		Id        int64  `json:"id"`
		CustomId  string `json:"customId"`
		Name      string `json:"name"`
		OwnerId   int64  `json:"ownerId"`
		Avatar    string `json:"avatar"`
		Memo      string `json:"memo"`
		CreatedAt string `json:"createdAt"`
		UpdatedAt string `json:"updatedAt"`
	}
	GroupPagedResp {
		PagedResp
		Data []GroupResp `json:"data"`
	}
)

@server (
	prefix:  /v1/groups
	group:   group
	timeout: 10s
)
service user-api {
	@handler GroupList
	get / (QueryListReq) returns (GroupPagedResp)

	@handler GroupCreate
	post / (GroupCreateReq)

	@handler GroupUpdate
	put /:id (GroupUpdateReq)

	// only owner can do this, transfer the admin to another user
	@handler GroupTransfer
	post /:id/transfer (GroupTransferReq)

	// only owner can do this, the actual operation is to delete the group
	@handler GroupDisband
	post /:id/disband (PathIdReq)
}

// ==========5.Group Contact==========
type (
	GroupIdReq {
		GroupId int64 `path:"groupId"`
	}
	GroupContactAddReq {
		GroupIdReq
		UserIds []int64 `json:"userIds"`
	}
	GroupContactCategorySetReq {
		PathIdReq
		CategoryId int64 `json:"categoryId"`
	}
	GroupContactStringSetReq {
		PathIdReq
		Value string `json:"value"`
	}
	GroupContactIsSet {
		PathIdReq
		Value bool `json:"value"`
	}
	GroupContactResp {
		Id             int64        `json:"id"`
		GroupId        int64        `json:"groupId"`
		UserId         int64        `json:"userId"`
		CategoryId     int64        `json:"categoryId"`
		UserNickname   string       `json:"userNickname"`
		Remark         string       `json:"remark"`
		Background     string       `json:"background"`
		IsDisturb      bool         `json:"isDisturb"`
		IsTop          bool         `json:"isTop"`
		IsShowNickname bool         `json:"isShowNickname"`
		CreatedAt      string       `json:"createdAt"`
		UpdatedAt      string       `json:"updatedAt"`
		Category       CategoryResp `json:"category"`
		Group          GroupResp    `json:"group"`
		User           UserResp     `json:"user"`
	}
)

@server (
	prefix:  /v1/group-contacts
	group:   group_contact
	timeout: 10s
)
service user-api {
	@handler GroupContactList
	get /:groupId (GroupIdReq) returns ([]GroupContactResp)

	// add user to group operated by group owner
	@handler GroupContactAdd
	post /:groupId (GroupContactAddReq)

	// join target group operated by user(retrieve userId from token)
	@handler GroupContactJoin
	post /:groupId/join (GroupIdReq)

	// leave target group operated by user(retrieve userId from token)
	@handler GroupContactLeave
	post /:groupId/leave (GroupIdReq)

	@handler GroupContactDelete
	delete /:id (PathIdReq)

	@handler GroupContactCategorySet
	post /:id/category (UserContactCategorySetReq)

	@handler GroupContactRemarkSet
	post /:id/remark (GroupContactStringSetReq)

	@handler GroupContactNicknameSet
	post /:id/nickname (GroupContactStringSetReq)

	@handler GroupContactBackgroundSet
	post /:id/background (GroupContactStringSetReq)

	@handler GroupContactIsDisturbSet
	post /:id/is-disturb (GroupContactIsSet)

	@handler GroupContactIsTopSet
	post /:id/is-top (GroupContactIsSet)

	@handler GroupContactIsShowNicknameSet
	post /:id/is-show-nickname (GroupContactIsSet)
}

// ==========6.Resource==========
type (
	ResourceListReq {
		Type int64 `form:"type,default=0"`
		QueryListReq
	}
	ResourceCreateReq {
		Src    string `json:"src"`
		Type   int64  `json:"type"`
		NameZh string `json:"nameZh"`
		NameEn string `json:"nameEn"`
	}
	ResourceUpdateReq {
		PathIdReq
		ResourceCreateReq
	}
	ResourceResp {
		Id        int64  `json:"id"`
		Src       string `json:"src"`
		Type      int64  `json:"type"`
		NameZh    string `json:"nameZh"`
		NameEn    string `json:"nameEn"`
		CreatedAt string `json:"createdAt"`
		UpdatedAt string `json:"updatedAt"`
	}
	ResourcePagedResp {
		PagedResp
		Data []ResourceResp `json:"data"`
	}
)

@server (
	prefix:  /v1/resources
	group:   resource
	timeout: 10s
)
service user-api {
	@handler ResourceList
	get / (ResourceListReq) returns (ResourcePagedResp)
}

@server (
	prefix:  /v1/admin/resources
	group:   admin_resource
	timeout: 10s
)
service user-api {
	@handler ResourceList
	get / (ResourceListReq) returns (ResourcePagedResp)

	@handler ResourceCreate
	post / (ResourceCreateReq)

	@handler ResourceUpdate
	put /:id (ResourceUpdateReq)

	@handler ResourceDelete
	delete /:id (PathIdReq)
}

// ==========7.Reactive==========
type (
	UploadReq {
		File string `form:"file"`
	}
	UploadResp {
		Url string `json:"url"`
	}
)

@server (
	prefix:  /v1
	group:   reactive
	timeout: 10s
)
service user-api {
	@handler Chat
	post /chat

	@handler Upload
	get /upload (UploadReq) returns (UploadResp)
}

