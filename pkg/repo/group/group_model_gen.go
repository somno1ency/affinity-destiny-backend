// Copyright 2024 Mackay Zhou <mackay.chow@gmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file.

// Code generated by goctl. DO NOT EDIT.

package group

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupFieldNames          = builder.RawFieldNames(&Group{})
	groupRows                = strings.Join(groupFieldNames, ",")
	groupRowsExpectAutoSet   = strings.Join(stringx.Remove(groupFieldNames, "`Id`"), ",")
	groupRowsWithPlaceHolder = strings.Join(stringx.Remove(groupFieldNames, "`Id`"), "=?,") + "=?"
)

type (
	groupModel interface {
		Insert(ctx context.Context, data *Group) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Group, error)
		FindOneByName(ctx context.Context, name string) (*Group, error)
		Update(ctx context.Context, data *Group) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGroupModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Group struct {
		Id         int64        `db:"Id"`
		CustomId   string       `db:"CustomId"`   // 群标识
		Name       string       `db:"Name"`       // 群名称
		OwnerId    int64        `db:"OwnerId"`    // 群创建者ID
		Avatar     string       `db:"Avatar"`     // 群头像
		Memo       string       `db:"Memo"`       // 群备注
		IsApproval int64        `db:"IsApproval"` // 是否需要审批
		CreatedAt  sql.NullTime `db:"CreatedAt"`  // 创建时间
		UpdatedAt  sql.NullTime `db:"UpdatedAt"`  // 更新时间
	}
)

func newGroupModel(conn sqlx.SqlConn) *defaultGroupModel {
	return &defaultGroupModel{
		conn:  conn,
		table: "`Group`",
	}
}

func (m *defaultGroupModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `Id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGroupModel) FindOne(ctx context.Context, id int64) (*Group, error) {
	query := fmt.Sprintf("select %s from %s where `Id` = ? limit 1", groupRows, m.table)
	var resp Group
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupModel) FindOneByName(ctx context.Context, name string) (*Group, error) {
	var resp Group
	query := fmt.Sprintf("select %s from %s where `Name` = ? limit 1", groupRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupModel) Insert(ctx context.Context, data *Group) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, groupRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CustomId, data.Name, data.OwnerId, data.Avatar, data.Memo, data.IsApproval, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultGroupModel) Update(ctx context.Context, newData *Group) error {
	query := fmt.Sprintf("update %s set %s where `Id` = ?", m.table, groupRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.CustomId, newData.Name, newData.OwnerId, newData.Avatar, newData.Memo, newData.IsApproval, newData.CreatedAt, newData.UpdatedAt, newData.Id)
	return err
}

func (m *defaultGroupModel) tableName() string {
	return m.table
}
