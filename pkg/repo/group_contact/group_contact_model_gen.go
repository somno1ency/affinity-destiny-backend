// Copyright 2024 Mackay Zhou <mackay.chow@gmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file.

// Code generated by goctl. DO NOT EDIT.

package group_contact

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupContactFieldNames          = builder.RawFieldNames(&GroupContact{})
	groupContactRows                = strings.Join(groupContactFieldNames, ",")
	groupContactRowsExpectAutoSet   = strings.Join(stringx.Remove(groupContactFieldNames, "`id`"), ",")
	groupContactRowsWithPlaceHolder = strings.Join(stringx.Remove(groupContactFieldNames, "`id`"), "=?,") + "=?"
)

type (
	groupContactModel interface {
		Insert(ctx context.Context, data *GroupContact) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GroupContact, error)
		Update(ctx context.Context, data *GroupContact) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGroupContactModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GroupContact struct {
		Id             int64         `db:"id"`
		GroupId        sql.NullInt64 `db:"group_id"`         // 群ID
		UserId         sql.NullInt64 `db:"user_id"`          // 用户ID
		CategoryId     int64         `db:"category_id"`      // 用户自定义分组ID
		UserNickname   string        `db:"userNickname"`     // 群昵称
		Remark         string        `db:"remark"`           // 群备注
		Background     string        `db:"background"`       // 背景
		IsDisturb      bool          `db:"is_disturb"`       // 是否免打扰
		IsTop          bool          `db:"is_top"`           // 是否置顶
		IsShowNickname bool          `db:"is_show_nickname"` // 是否显示群昵称
		CreatedAt      sql.NullTime  `db:"created_at"`       // 创建时间
		UpdatedAt      sql.NullTime  `db:"updated_at"`       // 更新时间
	}
)

func newGroupContactModel(conn sqlx.SqlConn) *defaultGroupContactModel {
	return &defaultGroupContactModel{
		conn:  conn,
		table: "`group_contact`",
	}
}

func (m *defaultGroupContactModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGroupContactModel) FindOne(ctx context.Context, id int64) (*GroupContact, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupContactRows, m.table)
	var resp GroupContact
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupContactModel) Insert(ctx context.Context, data *GroupContact) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, groupContactRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.GroupId, data.UserId, data.CategoryId, data.UserNickname, data.Remark, data.Background, data.IsDisturb, data.IsTop, data.IsShowNickname, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultGroupContactModel) Update(ctx context.Context, data *GroupContact) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, groupContactRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.GroupId, data.UserId, data.CategoryId, data.UserNickname, data.Remark, data.Background, data.IsDisturb, data.IsTop, data.IsShowNickname, data.CreatedAt, data.UpdatedAt, data.Id)
	return err
}

func (m *defaultGroupContactModel) tableName() string {
	return m.table
}
