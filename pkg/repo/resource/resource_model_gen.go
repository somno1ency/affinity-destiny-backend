// Copyright 2024 Mackay Zhou <mackay.chow@gmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file.

// Code generated by goctl. DO NOT EDIT.

package resource

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	resourceFieldNames          = builder.RawFieldNames(&Resource{})
	resourceRows                = strings.Join(resourceFieldNames, ",")
	resourceRowsExpectAutoSet   = strings.Join(stringx.Remove(resourceFieldNames, "`id`"), ",")
	resourceRowsWithPlaceHolder = strings.Join(stringx.Remove(resourceFieldNames, "`id`"), "=?,") + "=?"
)

type (
	resourceModel interface {
		Insert(ctx context.Context, data *Resource) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Resource, error)
		Update(ctx context.Context, data *Resource) error
		Delete(ctx context.Context, id int64) error
	}

	defaultResourceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Resource struct {
		Id        int64        `db:"id"`
		Src       string       `db:"src"`        // 资源地址
		Type      int64        `db:"type"`       // 资源类型
		NameZh    string       `db:"name_zh"`    // 资源中文名称
		NameEn    string       `db:"name_en"`    // 资源英文名称
		CreatedAt sql.NullTime `db:"created_at"` // 创建时间
		UpdatedAt sql.NullTime `db:"updated_at"` // 更新时间
	}
)

func newResourceModel(conn sqlx.SqlConn) *defaultResourceModel {
	return &defaultResourceModel{
		conn:  conn,
		table: "`resource`",
	}
}

func (m *defaultResourceModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultResourceModel) FindOne(ctx context.Context, id int64) (*Resource, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", resourceRows, m.table)
	var resp Resource
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultResourceModel) Insert(ctx context.Context, data *Resource) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, resourceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Src, data.Type, data.NameZh, data.NameEn, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultResourceModel) Update(ctx context.Context, data *Resource) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, resourceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Src, data.Type, data.NameZh, data.NameEn, data.CreatedAt, data.UpdatedAt, data.Id)
	return err
}

func (m *defaultResourceModel) tableName() string {
	return m.table
}
