// Code generated by goctl. DO NOT EDIT.

package user_contact

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userContactFieldNames          = builder.RawFieldNames(&UserContact{})
	userContactRows                = strings.Join(userContactFieldNames, ",")
	userContactRowsExpectAutoSet   = strings.Join(stringx.Remove(userContactFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userContactRowsWithPlaceHolder = strings.Join(stringx.Remove(userContactFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userContactModel interface {
		Insert(ctx context.Context, data *UserContact) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserContact, error)
		Update(ctx context.Context, data *UserContact) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserContactModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserContact struct {
		Id         int64        `db:"id"`
		OwnerId    int64        `db:"owner_id"`    // 所有者用户ID
		DstId      int64        `db:"dst_id"`      // 目标用户ID
		CategoryId int64        `db:"category_id"` // 用户自定义分组ID
		Background string       `db:"background"`  // 背景
		IsDisturb  bool         `db:"is_disturb"`  // 是否免打扰
		IsTop      bool         `db:"is_top"`      // 是否置顶
		IsRemind   bool         `db:"isRemind"`    // 是否提醒
		CreatedAt  sql.NullTime `db:"created_at"`  // 创建时间
		UpdatedAt  sql.NullTime `db:"updated_at"`  // 更新时间
	}
)

func newUserContactModel(conn sqlx.SqlConn) *defaultUserContactModel {
	return &defaultUserContactModel{
		conn:  conn,
		table: "`user_contact`",
	}
}

func (m *defaultUserContactModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserContactModel) FindOne(ctx context.Context, id int64) (*UserContact, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userContactRows, m.table)
	var resp UserContact
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserContactModel) Insert(ctx context.Context, data *UserContact) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, userContactRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OwnerId, data.DstId, data.CategoryId, data.Background, data.IsDisturb, data.IsTop, data.IsRemind)
	return ret, err
}

func (m *defaultUserContactModel) Update(ctx context.Context, data *UserContact) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userContactRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.OwnerId, data.DstId, data.CategoryId, data.Background, data.IsDisturb, data.IsTop, data.IsRemind, data.Id)
	return err
}

func (m *defaultUserContactModel) tableName() string {
	return m.table
}
